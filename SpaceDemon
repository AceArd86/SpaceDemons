from scene import *
from scene_drawing import *
from game_menu import MenuScene
from random import choice, randint, random
from sound import play_effect
from colorsys import hsv_to_rgb
from math import sin
from ui import Transform
from functools import partial

A = Action

filter_names = ['None', 'Gray', 'B&W', 'LCD', 'Wavy']

enemy1 = ('alien-monster.256x214.png')
enemy2 = ('AlienShip.png')
enemy3 = ('alien-monster.256x214 2.png')
enemy4 = ('spaceShips_007.png')

class Star:
    def __init__(self):
        self.x = randint(0, 768)
        self.y = randint(0, 1024)
        self.speed = random() * 20 + 1

    def update(self):
        self.y -= self.speed

class StarField:
    def __init__(self, scene, count):
        self.scene = scene
        self.stars = [Star() for _ in range(count)]

    def update(self):
        removed_stars = set()
        for star in self.stars:
            star.update()
            if star.y < 0:
                removed_stars.add(star)
        for removed_star in removed_stars:
            self.stars.remove(removed_star)
            new_star = Star()
            new_star.y = self.scene.size.h
            self.stars.append(new_star)
    
    def draw(self):
        background(0, 0.02, 0.1)
        for star in self.stars:
            alpha = (star.speed / 4) * 1.7
            fill(alpha, alpha, alpha)
            rect(star.x, star.y, 3, 3)

class Player:
    def __init__(self, scene):
        self.scene = scene
        self.x = scene.size.w / 2
        self.y = 100  # Starting y-position
        self.touch_position = None  # Track touch position
        self.dead = False

    def update(self):
        # Update player's position based on touch position
        if self.touch_position:
            touch_x, touch_y = self.touch_position
            # Ensure player stays within screen bounds
            self.x = max(0, min(touch_x, self.scene.size.w))
            self.y = max(0, min(touch_y, self.scene.size.h))

    def draw(self):
        # Draw player's spaceship
        push_matrix()
        translate(self.x, self.y)
        rotate(25)
        scale(.7)
        image('IMG_0215.PNG')
        pop_matrix()

    def bbox(self):
        return Rect(self.x - 20, self.y - 20, 40, 40)

    def touch_began(self, touch):
        # Set touch position when the screen is touched
        self.touch_position = touch.location

    def touch_moved(self, touch):
        if not self.scene.player.dead:
            # Calculate the distance moved since the last touch
            delta_x = touch.location.x - touch.prev_location.x
            delta_y = touch.location.y - touch.prev_location.y

            # Adjust the player's position based on the distance moved
            self.x += delta_x
            self.y += delta_y

            # Ensure player stays within screen bounds
            self.x = max(0, min(self.x, self.scene.size.w))
            self.y = max(0, min(self.y, self.scene.size.h))

    def touch_ended(self, touch):
        # Reset touch position when the screen is released
        self.touch_position = None

class Color:
    def __init__(self, red, green, blue, alpha=1.0):
        self.red = red
        self.green = green
        self.blue = blue
        self.alpha = alpha

    def as_tuple(self):
        return self.red, self.green, self.blue, self.alpha

    def __repr__(self):
        return f"Color(red={self.red}, green={self.green}, blue={self.blue}, alpha={self.alpha})"

class Enemy:
    def __init__(self, scene, image):
        self.image = image
        self.scene = scene
        self.hit = False
        self.x = randint(20, 768 - 20)
        self.initial_x = self.x
        self.y = 1024
        self.a = 1.0
        self.removed = False
        self.dead = False
        self.setup_enemy_properties()

    def setup_enemy_properties(self):
        r = random()
        if r < 0.1:
            self.size = 128
            self.color = Color(0, 1, 1, 0)
            self.points = 500
            self.energy = 3
            self.bullet_type = 3
        elif r < 0.5:
            self.size = 96
            self.color = Color(0, 1, 0, 1)
            self.points = 250
            self.energy = 2
            self.bullet_type = 2
        else:
            self.size = 64
            self.color = Color(1, 0, 1, 0)
            self.points = 100
            self.energy = 1
            self.bullet_type = 1

        self.fire_freq = randint(20, 200)
        self.fire = False
        self.t = randint(0, self.fire_freq)
        self.speed = 1.0 / self.size * 500
        self.amp = random() * 300

    def draw(self):
        if self.hit:
            tint(1, 0, 0, self.a)
        else:
            tint(self.color.red, self.color.green, self.color.blue, self.a)
        image(self.image, self.x - self.size / 2, self.y - self.size / 2,
              self.size, self.size)
        tint(1, 1, 1)

    def update(self, dt):
        self.y -= self.speed
        self.x = self.initial_x + sin(self.y / 100) * self.amp
        self.amp = max(self.amp * 0.99, 0)
        if self.y < -64:
            self.removed = True
        if self.dead:
            self.a -= 0.1
            if self.a <= 0:
                self.removed = True
        else:
            self.t += 1
            if not self.dead and self.t % self.fire_freq == 0:
                play_effect('digital:LowRandom')
                self.fire_bullets()

    def fire_bullets(self):
        if self.bullet_type == 1:
            bullet = Bullet(self.x, self.y)
            bullet.vy = -10
            bullet.bullet_type = 1
            self.scene.enemy_bullets.append(bullet)

        elif self.bullet_type == 2:
            for vx in [-3, 3]:
                bullet = Bullet(self.x, self.y)
                bullet.vy = -10
                bullet.vx = vx
                bullet.bullet_type = 2
                self.scene.enemy_bullets.append(bullet)
        else:
            for vx in [-3, 0, 3]:
                bullet = Bullet(self.x, self.y)
                bullet.vy = -10
                bullet.vx = vx
                bullet.bullet_type = 3
                self.scene.enemy_bullets.append(bullet)

    def bbox(self):
        s = self.size
        return Rect(self.x - s / 2 * 0.9, self.y - s / 2 * 0.8, s * 0.9,
                    s * 0.8)

class PowerUp (object):
    def __init__(self, scene, powerup_type):
        self.x = randint(20, 768 - 20)
        self.y = scene.size.h + 20
        self.hue = 0.0
        self.rot = 0.0
        self.t = 0.0
        self.powerup_type = powerup_type

    def update(self):
        self.hue += 0.02
        self.y -= 10
        self.rot -= 3.0
        self.t += 0.1

    def draw(self):
        if self.powerup_type == 0:
            s = 50 + sin(self.t) * 10
            image('spc:PowerupBlueStar', self.x - s / 2, self.y - s / 2, s, s)
        else:
            push_matrix()
            tint(*hsv_to_rgb(self.hue, 1, 1))
            translate(self.x, self.y)
            rotate(self.rot)
            image('spc:PowerupBlueBolt', -32, -32, 64, 64)
            tint(1, 1, 1)
            pop_matrix()

    def bbox(self):
        return Rect(self.x - 32, self.y - 32, 64, 64)

class Bullet:
    def __init__(self, ship_x, ship_y):
        self.x = ship_x
        self.y = ship_y
        self.vy = 0
        self.vx = 0
        # Adjust initial velocity as needed
        self.bullet_type = 0
        self.pass_through = False
        self.hue = 0.2

    def update(self):
        self.x += self.vx
        self.y += self.vy
        if self.pass_through:
            self.hue += 0.02

    def draw(self):
        if self.pass_through:
            fill(*hsv_to_rgb(self.hue, 1, 1))
            ellipse(self.x - 4, self.y - 4, 8, 8)
        elif self.bullet_type == 0:
            fill(1, 1, 0)
            ellipse(self.x - 4, self.y - 4, 8, 8)
        elif self.bullet_type == 1:
            fill(1, 0, 1)
            rect(self.x - 2, self.y - 8, 4, 16)
        elif self.bullet_type == 2:
            fill(0, 1, 0)
            ellipse(self.x - 4, self.y - 4, 8, 8)
        elif self.bullet_type == 3:
            fill(0, 1, 1)
            ellipse(self.x - 4, self.y - 4, 8, 8)

    def hit_test(self, rect):
        return Point(self.x, self.y) in rect

class Game(Scene):
    def setup(self):
        self.frame_count = 0
        self.delayed_invocations = []
        self.frenzy = False
        self.touch_disabled = False
        self.star_field = StarField(self, 30)
        self.player = Player(self)
        self.energy = 100
        self.filter = 0
        self.score = 0
        self.player.dead = False
        self.stars = []
        self.bullets = []
        self.enemies = []
        self.powerups = []
        self.enemy_bullets = []
        self.shot_fired = False
        self.powerup_duration = 5.0
        self.effect_node = EffectNode(parent=self)
        with open('filters.fsh') as f:
            self.effect_node.shader = Shader(f.read())
        self.effect_node.crop_rect = self.bounds
        self.effect_node.effects_enabled = False
        self.effects_layer = Layer(Rect(0, 0, self.size.w / 2, self.size.h / 2))
        self.hud_hearts = [
            SpriteNode('plf:HudHeart_full',
                       position=(30 + i * 32, self.size.h - 65),
                       scale=0.5,
                       parent=self) for i in range(3)
                       ]
        self.pause_button = SpriteNode('iow:pause_32', position=(32, self.size.h - 32), parent=self)
        self.show_start_menu()
        self.load_highscore()
        self.spawn()
    
    def load_highscore(self):
        try:
            with open('spacedemons_highscore', 'r') as f:
                self.highscore = int(f.read())
        except:
            self.highscore = 0

    def save_highscore(self):
        with open('spacedemons_highscore', 'w') as f:
            f.write(str(self.highscore))

    def spawn(self):
        self.enemies.append(Enemy(self, choice(
            [enemy1, enemy2, enemy3, enemy4])))  # Choose between enemies
        self.delay(random() + 0.5, self.spawn)
        if random() < 0.05:
            powerup = PowerUp(self, choice([0, 1]))
            self.powerups.append(powerup)
    
    def new_game(self):
        self.paused = False
        self.player.dead = False
        self.shot_fired = False
        self.score = 0
        self.bullets = []
        self.enemies = []
        self.enemy_bullets = []
        self.powerups = []
        self.stars = []
        self.spawn()
        self.load_highscore()
        self.score = 0
        self.lives_left = 3
        for h in self.hud_hearts:
            h.alpha = 1
    
    def touch_began(self, touch):
        x, y = touch.location
        if x < 48 and y > self.size.h - 48:
            self.show_pause_menu()
        if self.player.dead and not self.touch_disabled:
            play_effect('arcade:Hit_2')
        else:
            self.player.dead = False
            self.frame_count = 0
            self.fire()

    def touch_moved(self, touch):
        if not self.player.dead:
            self.player.touch_position = touch.prev_location
            # Implement player movement based on touch movement

    def fire(self):
        if self.shot_fired:
            return

        if self.frenzy:
            # Frenzy mode: shoot multiple bullets in a spread
            for vx in [-5, -2, 0, 2,
                       5]:  # Adjust the spread angles as needed
                bullet = Bullet(self.player.x, self.player.y)
                bullet.vy = 15
                bullet.vx = vx
                play_effect('arcade:Laser_1')
                bullet.pass_through = True
                self.bullets.append(bullet)
            else:
                # Regular spread
                bullet = Bullet(self.player.x, self.player.y)
                bullet.vy = 15
                bullet.vx = vx
                bullet.pass_through = True
                self.bullets.append(bullet)
        else:
            # Normal mode: shoot a single bullet
            bullet = Bullet(self.player.x, self.player.y)
            bullet.vy = 15
            self.bullets.append(bullet)
            play_effect('arcade:Laser_6')
            self.shot_fired = True

    def draw(self):
        self.shot_fired = False
        self.star_field.update()
        self.star_field.draw()

        removed_bullets = set()
        removed_enemy_bullets = set()
        removed_enemies = set()

        fill(1, 1, 0)
        for bullet in self.bullets:
            bullet.update()
            # Update bullet position
            bullet.draw()  # Draw bullet
            if bullet.y > 1024:
                removed_bullets.add(bullet)

        player_rect = self.player.bbox()
        fill(1, 0, 1)
        for bullet in self.enemy_bullets:
            bullet.update()
            bullet.draw()
            if bullet.y < -4:
                removed_enemy_bullets.add(bullet)
            elif not self.player.dead and bullet.hit_test(player_rect):
                removed_enemy_bullets.add(bullet)
                self.energy -= 10
                play_effect('arcade:Explosion_5')

        for enemy in self.enemies:
            enemy.update(self.dt)
            enemy.draw()
            enemy_rect = enemy.bbox()
            if not enemy.dead:
                for bullet in self.bullets:
                    if bullet.hit_test(enemy_rect):
                        removed_bullets.add(bullet)
                        enemy.energy -= 1
                        enemy.hit = True
                        self.delay(0.1, partial(enemy.__setattr__, 'hit',
                                                False))
                        if enemy.energy <= 0:
                            enemy.dead = True
                            self.explosion(enemy)
                            self.score += enemy.points
                            play_effect('arcade:Hit_2')
                        else:
                            play_effect('arcade:Explosion_2')
                if not self.player.dead and player_rect.intersects(enemy_rect):
                    play_effect('arcade:Hit_3')
                    enemy.dead = True
                    self.explosion(enemy)
                    self.energy -= 10
            if enemy.removed:
                removed_enemies.add(enemy)

        removed_powerups = set()
        for powerup in self.powerups:
            powerup.update()
            powerup.draw()
            if player_rect.intersects(powerup.bbox()):
                if powerup.powerup_type == 0:
                    play_effect('arcade:Powerup_2')
                    self.energy = min(100, self.energy + 20)
                else:
                    play_effect('arcade:Powerup_1')
                    self.frenzy = True
                    self.delay(5.0, partial(self.__setattr__, 'frenzy', False))
                removed_powerups.add(powerup)
            elif powerup.y < -32:
                removed_powerups.add(powerup)

        list(map(self.powerups.remove, removed_powerups))
        list(map(self.enemies.remove, removed_enemies))
        list(map(self.bullets.remove, removed_bullets))
        list(map(self.enemy_bullets.remove, removed_enemy_bullets))

        if not self.player.dead and self.energy <= 0:
            self.show_game_over()

        if not self.player.dead:
            self.player.update()
            self.player.draw()
            self.draw_status_bar()
        self.effects_layer.update(self.dt)
        self.effects_layer.draw()
        tint(1, 1, 1)
        self.frame_count += 1

        if not self.player.dead and len(self.touches) > 0:
            if self.frame_count % 12 == 0:
                self.fire()

    def show_game_over(self):
        self.paused = True
        self.menu = MenuScene(
            'Game Over', 'Highscore: %i' % self.highscore,
            ['New Game', 'Filter: ' + filter_names[self.filter]])
        self.present_modal_scene(self.menu)
        if self.score > self.highscore:
            self.highscore = self.score
            self.save_highscore()
    
    def show_start_menu(self):
        self.load_highscore()
        self.paused = True
        self.menu = MenuScene('Space Demons', 'Highscore: %i' % self.highscore, ['Play', 'Filter: ' + filter_names[self.filter]])
        self.present_modal_scene(self.menu)
    
    def show_pause_menu(self):
        self.paused = True
        self.menu = MenuScene(
            'Paused', 'Highscore: %i' % self.highscore,
            ['Continue', 'New Game', 'Filter: ' + filter_names[self.filter]])
        self.present_modal_scene(self.menu)
    
    def menu_button_selected(self, title):
        if title.startswith('Filter:'):
            self.filter = (self.filter + 1) % len(filter_names)
            if self.filter == 0:
                # No filter
                self.effect_node.effects_enabled = False
                self.background_color = '#292e37'
            else:
                # The shader (defined in filters.fsh) decides which filter to use based on this uniform:
                self.effect_node.shader.set_uniform('u_style', self.filter)
                self.effect_node.effects_enabled = True
                if self.filter in (1, 2):
                    self.background_color = '#333'
                elif self.filter == 3:
                    self.background_color = '#474e3b'
                else:
                    self.background_color = '#292e37'
            return 'Filter: ' + filter_names[self.filter]
        elif title in ('Continue', 'New Game', 'Play'):
            self.dismiss_modal_scene()
            self.menu = None
            self.paused = False
            if title in ('New Game', 'Play'):
                self.new_game()

    def draw_status_bar(self):
        hue = (self.energy / 100.0) * 0.35 + 1.0
        r, g, b = hsv_to_rgb(hue, 1, 1)
        fill(r, g, b)
        rect(0, self.size.h - 40, self.energy / 100.0 * self.size.w, 5)
        text(str(self.score), 'Helvetica Neue', 40, self.size.w / 2, self.size.h - 70)
    
    def explosion(self, enemy):
        for i in range(int(enemy.size / 6)):
            s = enemy.size / 5
            l = Layer(Rect(enemy.x - s / 2, enemy.y - s / 2, s, s))
            l.background = enemy.color
            l.animate('frame', Rect(enemy.x + randint(-100, 100), enemy.y + randint(-100, 100), s / 3, s / 3), curve=curve_ease_out)
            l.animate('alpha', 0.0, 0.5, completion=l.remove_layer)
            self.effects_layer.add_layer(l)

if __name__ == '__main__':
    run(Game())
